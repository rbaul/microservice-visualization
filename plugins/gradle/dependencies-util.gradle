import groovy.json.JsonOutput

static def getDependencyFormatted(String group, String name, String version) {
    return String.format("%s:%s:%s", group, name, version)
}

static def stringToLabel(String string) {
    def name = string.replaceAll('[_-]', ' ').trim()
    return name.substring(0, 1).toUpperCase() + name.substring(1)
}

def getApplicationDescription() {
    return project.getProperties().getOrDefault('description', null)
}

def getApplicationExtProperty(String name, String defaultValue) {
    return project.getProperties().getOrDefault('ext', Map.of()).getProperties().getOrDefault(name, defaultValue)
}

def getJavaVersion() {
    return project.getSourceCompatibility().getMajorVersion()
//    return JavaVersion.current().getMajorVersion()
}

def getFirstLevelModuleDependencies() {
    return configurations.runtimeClasspath.resolvedConfiguration.getFirstLevelModuleDependencies().collect {
//        [
//                groupId: it.getModuleGroup(),
//                artifactId: it.getModuleName(),
//                version: it.getModuleVersion()
//        ]
        getDependencyFormatted(it.getModuleGroup(), it.getModuleName(), it.getModuleVersion())
    }
}

def getManagementDependencies() {
    if (!project.hasProperty('dependencyManagement')) {
        return []
    }
    return dependencyManagement.getPomConfigurer().dependencyManagement.importedBoms.collect {
        getDependencyFormatted(it.coordinates.groupId, it.coordinates.artifactId, it.coordinates.version)
    }
}

def getApplicationJson() {
    def dependencies = getFirstLevelModuleDependencies()
    def managementDependencies = getManagementDependencies()

    Map<String, Object> app = [
            name: project.getName(),
            label: getApplicationExtProperty('name', stringToLabel(project.getName()))
    ]

    // Description
    String description = getApplicationDescription()
    if (description != null) {
        app.put('description', description)
    }

    // Owner
    String owner = getApplicationExtProperty('ownerName', null)
    if (owner != null) {
        app.put('owner', owner)
    }

    app.put('tags', [
            java: getJavaVersion(),
            gradle: project.getGradle().getGradleVersion()
    ])

    if (dependencies.size() > 0) {
        app.put('dependencies', dependencies)
    }

    if (managementDependencies.size() > 0) {
        app.put('managementDependencies', managementDependencies)
    }
    return app
}

tasks.register('createDependencyFile') {
    doLast {
        String dependencyFileLocation = getApplicationExtProperty('dependencyFileLocation', '')
        Map<String, Object> dependencyJson = getApplicationJson()
        File file = new File("${project.rootDir}/${dependencyFileLocation}" + dependencyJson.name + '.json')
        file.write(JsonOutput.prettyPrint(JsonOutput.toJson(dependencyJson)))
    }
}

//tasks.register('javaVersion') {
//    println JavaVersion.current()
//}

//tasks.register('getFirstLevelModuleDependencies') {
//    final def dependencies = configurations.compileClasspath.resolvedConfiguration.getFirstLevelModuleDependencies()
//    println dependencies.size()
//    dependencies.each {
//        println it
//    }
//}

//tasks.register('getResolvedArtifacts') {
//    println configurations.compileClasspath.resolvedConfiguration.getResolvedArtifacts().size()
//    println configurations.compileClasspath.resolvedConfiguration.getResolvedArtifacts()
////    println configurations.compileClasspath.resolvedConfiguration.getLenientConfiguration().getAllModuleDependencies().size()
////    println configurations.compileClasspath.resolvedConfiguration.getLenientConfiguration().getAllModuleDependencies()
//}

//tasks.register('bom-dependencies') {
//    final def configurer = dependencyManagement.getPomConfigurer()
//
//    def boms = configurer.dependencyManagement.importedBoms
//    println boms.size()
//    boms.each {
//        def coordinates = it.coordinates
//        println "- " + coordinates.groupId + ":" + coordinates.artifactId + ":" + coordinates.version
//    }
//}

//tasks.register('all-dependencies') {
//    def depNames = new HashSet<ModuleComponentIdentifier>()
//    dependencyManagement{
//        imports {
//            resolutionStrategy {
//                componentSelection {
//                    all { ComponentSelection selection ->
//                        depNames.add(selection.candidate)
////                    println selection.candidate.module + ' ' + selection.candidate.version
//                    }
//                }
//            }
//        }
//    }
//
//    configurations.compileClasspath.resolvedConfiguration
//
//    println depNames.size()
//    depNames.each {
//        println it
//    }
//}

//tasks.register('readOut') {
//    configurations.runtimeClasspath {
//        it.allDependencies.each {
//            println "- " + it.name + ", " + it.getGroup() + ":" + it.getName() + ":" + it.getVersion() + " " + it.properties['attributes']
//        }
//    }
//}