import groovy.json.JsonOutput

static def getDependencyFormatted(String... array) {
    return String.join(":", array)
}

static def convertMapToList(Map<String, String> dependencies) {
    return dependencies.collect {
        getDependencyFormatted(it.getKey(), it.getValue())
    }
}

static def stringToLabel(String string) {
    def name = string.replaceAll('[_-]', ' ').trim()
    return name.substring(0, 1).toUpperCase() + name.substring(1)
}

def getApplicationDescription() {
    return project.getProperties().getOrDefault('description', null)
}

def getApplicationExtProperty(String name, String defaultValue) {
    return project.getProperties().getOrDefault('ext', Map.of()).getProperties().getOrDefault(name, defaultValue)
}

def getJavaVersion() {
    return project.getSourceCompatibility().getMajorVersion()
//    return JavaVersion.current().getMajorVersion()
}

def getFirstLevelModuleDependencies() {
    Map<String, String> dependencies = [:]

    configurations.runtimeClasspath.resolvedConfiguration.getFirstLevelModuleDependencies().each {
//        [
//                groupId: it.getModuleGroup(),
//                artifactId: it.getModuleName(),
//                version: it.getModuleVersion()
//        ]
        // Project modules
        if (it.parentArtifacts.toString().contains('project :')) {
            it.children.each { ch ->
                dependencies.put(getDependencyFormatted(ch.getModuleGroup(), ch.getModuleName()), ch.getModuleVersion())
            }
        }
        dependencies.put(getDependencyFormatted(it.getModuleGroup(), it.getModuleName()), it.getModuleVersion())
    }

    return dependencies
}

def getAllDependencies() {
    Map<String, String> dependencies = [:]

    configurations.runtimeClasspath.resolvedConfiguration.getResolvedArtifacts().each {
        dependencies.put(getDependencyFormatted(it.owner.id.group, it.owner.id.name), it.owner.version)
    }

    return dependencies

//    return configurations.runtimeClasspath.resolvedConfiguration.getResolvedArtifacts().collect{it.owner.toString()}
}

Map<String, Object> getManagementDependencies(Map<String, String> dependencies) {
    if (!project.hasProperty('dependencyManagement')) {
        return [:]
    }

    Map<String, Object> bomDetails = [:]

    def dependencyManagement = dependencyManagement.getPomConfigurer().dependencyManagement
    def boms = dependencyManagement.importedBoms
    if (boms.size() > 0) {
        def resolvedBoms
        if (boms[0].class.getSimpleName() == "Pom") { // Already resolved (1.0.11.RELEASE)
            resolvedBoms = boms
        } else { // Not resolved
            resolvedBoms = dependencyManagement.pomResolver.resolvePomsLeniently(boms)
        }
        resolvedBoms.each {
            def pomCoordinates = getDependencyFormatted(it.getCoordinates().groupId, it.getCoordinates().artifactId, it.getCoordinates().version)
            Map<String, String> dependency = [:]
            it.getManagedDependencies().each {
                def dependencyVersion = getDependencyFormatted(it.getCoordinates().groupId, it.getCoordinates().artifactId)
                if (dependencies.containsKey(dependencyVersion)) {
                    dependency.put(dependencyVersion, it.getCoordinates().version)
                }
            }
            bomDetails.put(pomCoordinates, dependency)
        }
    }

    return bomDetails
}

def getManagementDependenciesExplicit() {
    if (!project.hasProperty('dependencyManagement')) {
        return []
    }

    def versionsMap = [:]

    if (project.hasProperty('dependencyVersions')) {
        dependencyVersions.each { key, val ->
            def newKey = "\${$key}"
            versionsMap[newKey] = val
        }
    }

    return dependencyManagement.getPomConfigurer().dependencyManagement.explicitVersions.collect { key, val ->
        final def version = versionsMap.containsKey(val) ? versionsMap.get(val) : val
        final def split = key.split(':')
        final def groupId = split[0]
        final def artifactId = split[1]
        return getDependencyFormatted(groupId, artifactId, version)
    }
}

def getApplicationJson() {
    def directDependenciesMap = getFirstLevelModuleDependencies()
    def fullDependenciesMap = getAllDependencies()

    def directDependencies = convertMapToList(directDependenciesMap)
    def fullDependencies = convertMapToList(fullDependenciesMap)

    def managementDependencies = getManagementDependencies(fullDependenciesMap)
    def managementDependenciesExplicit = getManagementDependenciesExplicit()

    Map<String, Object> app = [
            name   : project.getName(),
            label  : getApplicationExtProperty('name', stringToLabel(project.getName())),
            group  : project.getGroup(),
            version: project.getVersion()
    ]

    // Description
    String description = getApplicationDescription()
    if (description != null) {
        app.put('description', description)
    }

    // Type
    String type = getApplicationExtProperty('type', null)
    if (type != null) {
        app.put('type', type)
    }

    // Owner
    String owner = getApplicationExtProperty('ownerName', null)
    if (owner != null) {
        app.put('owner', owner)
    }

    // Location
    String location // Add implementation
    if (location != null) {
        app.put('location', location)
    }

    app.put('tags', [
            java                        : getJavaVersion(),
            gradle                      : project.getGradle().getGradleVersion(),
            'Overridden by dependencies': !(project.hasProperty('dependencyManagement') && !dependencyManagement.dependencyManagementSettings.overriddenByDependencies)
    ])

    if (directDependencies.size() > 0) {
        app.put('dependencies', directDependencies)
    }

    if (fullDependencies.size() > 0) {
        app.put('fullDependencies', fullDependencies)
    }

    if (managementDependencies.size() > 0) {
        app.put('managementDependencies', managementDependencies.collect { it.getKey() })
        app.put('dependencyManagement', managementDependencies)
    }

    if (type == 'bom' && managementDependenciesExplicit.size() > 0) {
        app.put('dependencies', managementDependenciesExplicit)
    }
    return app
}

tasks.register('createDependencyFile') {
    doLast {
        String dependencyFileLocation = getApplicationExtProperty('dependencyFileLocation', '')
        Map<String, Object> dependencyJson = getApplicationJson()
        File file = new File("${project.rootDir}/${dependencyFileLocation}${dependencyJson.name}.json")
        file.write(JsonOutput.prettyPrint(JsonOutput.toJson(dependencyJson)))
    }
}

//tasks.register('javaVersion') {
//    println JavaVersion.current()
//}

//tasks.register('getFirstLevelModuleDependencies') {
//    final def dependencies = configurations.compileClasspath.resolvedConfiguration.getFirstLevelModuleDependencies()
//    println dependencies.size()
//    dependencies.each {
//        println it
//    }
//}

//tasks.register('getResolvedArtifacts') {
//    println configurations.compileClasspath.resolvedConfiguration.getResolvedArtifacts().size()
//    println configurations.compileClasspath.resolvedConfiguration.getResolvedArtifacts()
////    println configurations.compileClasspath.resolvedConfiguration.getLenientConfiguration().getAllModuleDependencies().size()
////    println configurations.compileClasspath.resolvedConfiguration.getLenientConfiguration().getAllModuleDependencies()
//}

//tasks.register('bom-dependencies') {
//    final def configurer = dependencyManagement.getPomConfigurer()
//
//    def boms = configurer.dependencyManagement.importedBoms
//    println boms.size()
//    boms.each {
//        def coordinates = it.coordinates
//        println "- " + coordinates.groupId + ":" + coordinates.artifactId + ":" + coordinates.version
//    }
//}

//tasks.register('all-dependencies') {
//    def depNames = new HashSet<ModuleComponentIdentifier>()
//    dependencyManagement{
//        imports {
//            resolutionStrategy {
//                componentSelection {
//                    all { ComponentSelection selection ->
//                        depNames.add(selection.candidate)
////                    println selection.candidate.module + ' ' + selection.candidate.version
//                    }
//                }
//            }
//        }
//    }
//
//    configurations.compileClasspath.resolvedConfiguration
//
//    println depNames.size()
//    depNames.each {
//        println it
//    }
//}

//tasks.register('readOut') {
//    configurations.runtimeClasspath {
//        it.allDependencies.each {
//            println "- " + it.name + ", " + it.getGroup() + ":" + it.getName() + ":" + it.getVersion() + " " + it.properties['attributes']
//        }
//    }
//}